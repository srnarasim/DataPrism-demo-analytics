{"version":3,"file":"MockDataPrismContext-CNypWElX.js","sources":["../../src/contexts/MockDataPrismContext.tsx"],"sourcesContent":["/**\n * Mock DataPrism implementation for fallback when CDN fails\n */\n\n// Mock engine class that simulates DataPrism functionality\nexport class MockDataPrismEngine {\n  private tables: Map<string, any[]> = new Map();\n\n  constructor(_config: any = {}) {\n    // Config not used in mock implementation\n  }\n\n  async initialize() {\n    console.log(\"🔧 Mock DataPrism Engine initialized\");\n    // Simulate initialization delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n  }\n\n  async query(sql: string) {\n    console.log(\"📝 Mock query:\", sql);\n    \n    // Simple mock responses for common queries\n    if (sql.includes(\"SHOW TABLES\")) {\n      return {\n        data: Array.from(this.tables.keys()).map(name => ({ name })),\n        rowCount: this.tables.size,\n        executionTime: Math.random() * 100\n      };\n    }\n    \n    if (sql.includes(\"DESCRIBE\")) {\n      const tableName = sql.split(\" \")[1];\n      if (this.tables.has(tableName)) {\n        const sampleRow = this.tables.get(tableName)?.[0] || {};\n        return {\n          data: Object.keys(sampleRow).map(col => ({\n            column_name: col,\n            data_type: typeof sampleRow[col] === 'number' ? 'INTEGER' : 'VARCHAR',\n            is_nullable: 'YES'\n          })),\n          rowCount: Object.keys(sampleRow).length,\n          executionTime: Math.random() * 50\n        };\n      }\n    }\n    \n    if (sql.includes(\"SELECT\") || sql.includes(\"FROM\")) {\n      // Return sample data for any SELECT query\n      const tables = Array.from(this.tables.entries());\n      if (tables.length > 0) {\n        const [_tableName, data] = tables[0];\n        return {\n          data: data.slice(0, 10), // Return first 10 rows\n          rowCount: data.length,\n          executionTime: Math.random() * 200\n        };\n      }\n    }\n    \n    return {\n      data: [],\n      rowCount: 0,\n      executionTime: Math.random() * 100\n    };\n  }\n\n  async loadData(data: any[], tableName: string) {\n    console.log(`📊 Mock loading ${data.length} records into table: ${tableName}`);\n    this.tables.set(tableName, data);\n    await new Promise(resolve => setTimeout(resolve, 200)); // Simulate loading time\n  }\n\n  async getTableInfo(tableName: string) {\n    if (!this.tables.has(tableName)) {\n      throw new Error(`Table ${tableName} not found`);\n    }\n    \n    const sampleRow = this.tables.get(tableName)?.[0] || {};\n    return Object.keys(sampleRow).map(col => ({\n      column_name: col,\n      data_type: typeof sampleRow[col] === 'number' ? 'INTEGER' : 'VARCHAR',\n      is_nullable: 'YES'\n    }));\n  }\n\n  async listTables() {\n    return Array.from(this.tables.keys());\n  }\n\n  getMetrics() {\n    return {\n      queriesExecuted: Math.floor(Math.random() * 100),\n      averageQueryTime: Math.floor(Math.random() * 200),\n      cacheHitRate: Math.random(),\n      memoryUsage: Math.floor(Math.random() * 100),\n      tablesLoaded: this.tables.size,\n    };\n  }\n}"],"names":["MockDataPrismEngine","_config","__publicField","resolve","sql","name","tableName","sampleRow","col","tables","_tableName","data"],"mappings":"oKAKO,MAAMA,CAAoB,CAG/B,YAAYC,EAAe,GAAI,CAFvBC,EAAA,kBAAiC,IAIzC,CAEA,MAAM,YAAa,CACjB,QAAQ,IAAI,sCAAsC,EAElD,MAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,GAAG,CAAC,CACvD,CAEA,MAAM,MAAMC,EAAa,CAIvB,GAHA,QAAQ,IAAI,iBAAkBA,CAAG,EAG7BA,EAAI,SAAS,aAAa,EAC5B,MAAO,CACL,KAAM,MAAM,KAAK,KAAK,OAAO,MAAM,EAAE,IAAIC,IAAS,CAAE,KAAAA,CAAA,EAAO,EAC3D,SAAU,KAAK,OAAO,KACtB,cAAe,KAAK,SAAW,GAAA,EAInC,GAAID,EAAI,SAAS,UAAU,EAAG,CAC5B,MAAME,EAAYF,EAAI,MAAM,GAAG,EAAE,CAAC,EAClC,GAAI,KAAK,OAAO,IAAIE,CAAS,EAAG,CAC9B,MAAMC,EAAY,KAAK,OAAO,IAAID,CAAS,IAAI,CAAC,GAAK,CAAA,EACrD,MAAO,CACL,KAAM,OAAO,KAAKC,CAAS,EAAE,IAAIC,IAAQ,CACvC,YAAaA,EACb,UAAW,OAAOD,EAAUC,CAAG,GAAM,SAAW,UAAY,UAC5D,YAAa,KAAA,EACb,EACF,SAAU,OAAO,KAAKD,CAAS,EAAE,OACjC,cAAe,KAAK,SAAW,EAAA,CAEnC,CACF,CAEA,GAAIH,EAAI,SAAS,QAAQ,GAAKA,EAAI,SAAS,MAAM,EAAG,CAElD,MAAMK,EAAS,MAAM,KAAK,KAAK,OAAO,SAAS,EAC/C,GAAIA,EAAO,OAAS,EAAG,CACrB,KAAM,CAACC,EAAYC,CAAI,EAAIF,EAAO,CAAC,EACnC,MAAO,CACL,KAAME,EAAK,MAAM,EAAG,EAAE,EACtB,SAAUA,EAAK,OACf,cAAe,KAAK,SAAW,GAAA,CAEnC,CACF,CAEA,MAAO,CACL,KAAM,CAAA,EACN,SAAU,EACV,cAAe,KAAK,SAAW,GAAA,CAEnC,CAEA,MAAM,SAASA,EAAaL,EAAmB,CAC7C,QAAQ,IAAI,mBAAmBK,EAAK,MAAM,wBAAwBL,CAAS,EAAE,EAC7E,KAAK,OAAO,IAAIA,EAAWK,CAAI,EAC/B,MAAM,IAAI,QAAQR,GAAW,WAAWA,EAAS,GAAG,CAAC,CACvD,CAEA,MAAM,aAAaG,EAAmB,CACpC,GAAI,CAAC,KAAK,OAAO,IAAIA,CAAS,EAC5B,MAAM,IAAI,MAAM,SAASA,CAAS,YAAY,EAGhD,MAAMC,EAAY,KAAK,OAAO,IAAID,CAAS,IAAI,CAAC,GAAK,CAAA,EACrD,OAAO,OAAO,KAAKC,CAAS,EAAE,IAAIC,IAAQ,CACxC,YAAaA,EACb,UAAW,OAAOD,EAAUC,CAAG,GAAM,SAAW,UAAY,UAC5D,YAAa,KAAA,EACb,CACJ,CAEA,MAAM,YAAa,CACjB,OAAO,MAAM,KAAK,KAAK,OAAO,MAAM,CACtC,CAEA,YAAa,CACX,MAAO,CACL,gBAAiB,KAAK,MAAM,KAAK,OAAA,EAAW,GAAG,EAC/C,iBAAkB,KAAK,MAAM,KAAK,OAAA,EAAW,GAAG,EAChD,aAAc,KAAK,OAAA,EACnB,YAAa,KAAK,MAAM,KAAK,OAAA,EAAW,GAAG,EAC3C,aAAc,KAAK,OAAO,IAAA,CAE9B,CACF"}