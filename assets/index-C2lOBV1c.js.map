{"version":3,"mappings":"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","names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","client","defaultCDNConfig","getCDNConfig","getCDNAssetUrls","config","baseUrl","AssetLoadMonitor","__publicField","assetUrl","trackingId","size","metric","endTime","error","metrics","successfulMetrics","failedMetrics","totalLoadTime","sum","averageLoadTime","totalSize","slowestAsset","slowest","current","resource","cdnAssets","summary","cacheHitRatio","violations","bundleSizeOk","loadTimeOk","cacheHitRatioOk","observer","resourceObserver","list","entry","resourceTiming","CDNAssetLoader","urls","manifest","hybridTimeout","DataPrism","response","url","integrity","resolve","reject","script","name","timeout","start","check","assetName","assetInfo","lastError","maxRetries","attempt","link","DataPrismContext","createContext","DataPrismProvider","children","engine","setEngine","useState","isInitialized","setIsInitialized","isInitializing","setIsInitializing","initializationError","setInitializationError","cdnStatus","setCdnStatus","cdnInfo","setCdnInfo","initializeDataPrism","useCallback","cdnConfig","loader","status","engineInstance","connectionError","errorMessage","secondError","cdnError","MockDataPrismEngine","__vitePreload","loadSampleData","testResult","salesData","generateSalesData","analyticsData","generateAnalyticsData","productData","generateProductData","tableList","useEffect","query","sql","loadData","data","tableName","getTableInfo","listTables","getPerformanceMetrics","retry","getCDNStatus","value","useDataPrism","context","useContext","count","regions","products","salespeople","_","i","row","sources","pages","devices","categories","brands","CDNStatus","getStatusColor","getStatusIcon","getStatusText","jsx","jsxs","HomePage","FeatureCard","InfoItem","DatasetCard","title","description","icon","href","color","colorClasses","label","detail","records","table","ErrorBoundary","Component","props","errorInfo","App","Router","Routes","Route","ReactDOM","React"],"ignoreList":[0,1,2],"sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../node_modules/react-dom/client.js","../../src/config/cdn.ts","../../src/utils/assetMonitor.ts","../../src/utils/cdnLoader.ts","../../src/contexts/DataPrismContext.tsx","../../src/components/CDNStatus.tsx","../../src/pages/HomePage.tsx","../../src/components/ErrorBoundary.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","/**\n * CDN Configuration for DataPrism Demo Analytics\n * Handles version-controlled CDN consumption with fallback strategies\n */\n\nexport interface CDNConfig {\n  baseUrl: string;\n  version: string;\n  integrity?: {\n    core?: string;\n    orchestration?: string;\n    plugins?: Record<string, string>;\n  };\n  fallback?: {\n    enabled: boolean;\n    retries: number;\n    timeout: number;\n  };\n}\n\nexport const defaultCDNConfig: CDNConfig = {\n  baseUrl: 'https://srnarasim.github.io/DataPrism',\n  version: 'latest',\n  fallback: {\n    enabled: true,\n    retries: 3,\n    timeout: 20000 // Increased timeout for hybrid loading\n  }\n};\n\n// Environment-based configuration\nexport const getCDNConfig = (): CDNConfig => {\n  return {\n    ...defaultCDNConfig,\n    baseUrl: import.meta.env.VITE_DATAPRISM_CDN_URL || defaultCDNConfig.baseUrl,\n    version: import.meta.env.VITE_DATAPRISM_VERSION || defaultCDNConfig.version,\n  };\n};\n\n// CDN Asset URLs for Hybrid Architecture\nexport const getCDNAssetUrls = (config: CDNConfig = getCDNConfig()) => {\n  const baseUrl = config.baseUrl;\n  \n  return {\n    manifest: `${baseUrl}/manifest.json`,\n    coreBundle: `${baseUrl}/dataprism.umd.js`, // ~29KB with hybrid loading\n    coreESModule: `${baseUrl}/dataprism.min.js`, // ~36KB with hybrid loading\n    wasmAssets: `${baseUrl}/assets/`, // Auto-detects CDN base URL\n    plugins: `${baseUrl}/plugins/manifest.json`,\n    workers: `${baseUrl}/workers/` // DuckDB workers (~3MB)\n  };\n};\n\n// Performance configuration for Hybrid Architecture\nexport const CDN_PERFORMANCE_CONFIG = {\n  maxLoadTime: 8000, // Increased for hybrid loading with workers\n  maxRetries: 3,\n  retryDelay: 1000,\n  cacheDuration: 3600000, // 1 hour\n  hybridLoadingTimeout: 15000, // Timeout for complete hybrid initialization\n  workerLoadTimeout: 10000, // Timeout for DuckDB worker loading\n} as const;","/**\n * Asset Load Monitor for DataPrism Demo Analytics\n * Monitors asset loading performance and provides metrics\n */\n\nimport { AssetMetrics } from '@/types/validation';\n\nexport class AssetLoadMonitor {\n  private metrics: Map<string, AssetMetrics> = new Map();\n  private observers: PerformanceObserver[] = [];\n  private resourceMetrics: Map<string, PerformanceResourceTiming> = new Map();\n  \n  constructor() {\n    this.setupResourceObserver();\n  }\n  \n  /**\n   * Starts tracking an asset load\n   */\n  startTracking(assetUrl: string): string {\n    const trackingId = this.generateTrackingId();\n    \n    this.metrics.set(trackingId, {\n      url: assetUrl,\n      startTime: performance.now(),\n      status: 'loading'\n    });\n    \n    return trackingId;\n  }\n  \n  /**\n   * Records successful asset load\n   */\n  recordSuccess(trackingId: string, size?: number): void {\n    const metric = this.metrics.get(trackingId);\n    if (metric) {\n      const endTime = performance.now();\n      metric.endTime = endTime;\n      metric.size = size;\n      metric.status = 'success';\n      metric.duration = endTime - metric.startTime;\n      \n      // Try to get additional metrics from Performance API\n      this.enrichMetricsFromPerformanceAPI(metric);\n    }\n  }\n  \n  /**\n   * Records asset load error\n   */\n  recordError(trackingId: string, error: Error): void {\n    const metric = this.metrics.get(trackingId);\n    if (metric) {\n      const endTime = performance.now();\n      metric.endTime = endTime;\n      metric.error = error.message;\n      metric.status = 'error';\n      metric.duration = endTime - metric.startTime;\n    }\n  }\n  \n  /**\n   * Gets all collected metrics\n   */\n  getMetrics(): AssetMetrics[] {\n    return Array.from(this.metrics.values());\n  }\n  \n  /**\n   * Gets metrics for a specific asset URL\n   */\n  getMetricsForAsset(assetUrl: string): AssetMetrics[] {\n    return Array.from(this.metrics.values()).filter(metric => \n      metric.url === assetUrl\n    );\n  }\n  \n  /**\n   * Gets performance summary\n   */\n  getPerformanceSummary(): {\n    totalAssets: number;\n    successfulLoads: number;\n    failedLoads: number;\n    averageLoadTime: number;\n    totalSize: number;\n    slowestAsset: AssetMetrics | null;\n  } {\n    const metrics = this.getMetrics();\n    const successfulMetrics = metrics.filter(m => m.status === 'success');\n    const failedMetrics = metrics.filter(m => m.status === 'error');\n    \n    const totalLoadTime = successfulMetrics.reduce((sum, m) => sum + (m.duration || 0), 0);\n    const averageLoadTime = successfulMetrics.length > 0 ? totalLoadTime / successfulMetrics.length : 0;\n    \n    const totalSize = successfulMetrics.reduce((sum, m) => sum + (m.size || 0), 0);\n    \n    const slowestAsset = successfulMetrics.reduce((slowest, current) => {\n      if (!slowest || (current.duration || 0) > (slowest.duration || 0)) {\n        return current;\n      }\n      return slowest;\n    }, null as AssetMetrics | null);\n    \n    return {\n      totalAssets: metrics.length,\n      successfulLoads: successfulMetrics.length,\n      failedLoads: failedMetrics.length,\n      averageLoadTime,\n      totalSize,\n      slowestAsset\n    };\n  }\n  \n  /**\n   * Monitors DataPrism-specific assets\n   */\n  monitorDataPrismAssets(): void {\n    const dataPrismAssets = Array.from(this.resourceMetrics.values())\n      .filter(resource => resource.name.includes('dataprism') || resource.name.includes('duckdb'));\n    \n    dataPrismAssets.forEach(resource => {\n      const trackingId = this.generateTrackingId();\n      this.metrics.set(trackingId, {\n        url: resource.name,\n        startTime: resource.startTime,\n        endTime: resource.responseEnd,\n        duration: resource.duration,\n        size: resource.transferSize,\n        status: 'success'\n      });\n    });\n  }\n  \n  /**\n   * Gets CDN cache hit ratio\n   */\n  getCacheHitRatio(): number {\n    const cdnAssets = Array.from(this.resourceMetrics.values())\n      .filter(resource => resource.name.includes('cdn') || resource.name.includes('jsdelivr'));\n    \n    if (cdnAssets.length === 0) return 0;\n    \n    const cachedAssets = cdnAssets.filter(resource => \n      resource.transferSize === 0 || resource.transferSize < resource.decodedBodySize\n    );\n    \n    return cachedAssets.length / cdnAssets.length;\n  }\n  \n  /**\n   * Validates performance thresholds\n   */\n  validatePerformanceThresholds(): {\n    bundleSizeOk: boolean;\n    loadTimeOk: boolean;\n    cacheHitRatioOk: boolean;\n    violations: string[];\n  } {\n    const summary = this.getPerformanceSummary();\n    const cacheHitRatio = this.getCacheHitRatio();\n    const violations: string[] = [];\n    \n    // Check bundle size (8MB limit)\n    const bundleSizeOk = summary.totalSize <= 8 * 1024 * 1024;\n    if (!bundleSizeOk) {\n      violations.push(`Bundle size ${(summary.totalSize / 1024 / 1024).toFixed(2)}MB exceeds 8MB limit`);\n    }\n    \n    // Check average load time (2s limit)\n    const loadTimeOk = summary.averageLoadTime <= 2000;\n    if (!loadTimeOk) {\n      violations.push(`Average load time ${summary.averageLoadTime.toFixed(0)}ms exceeds 2000ms limit`);\n    }\n    \n    // Check cache hit ratio (95% target)\n    const cacheHitRatioOk = cacheHitRatio >= 0.95;\n    if (!cacheHitRatioOk) {\n      violations.push(`Cache hit ratio ${(cacheHitRatio * 100).toFixed(1)}% below 95% target`);\n    }\n    \n    return {\n      bundleSizeOk,\n      loadTimeOk,\n      cacheHitRatioOk,\n      violations\n    };\n  }\n  \n  /**\n   * Clears all collected metrics\n   */\n  clearMetrics(): void {\n    this.metrics.clear();\n    this.resourceMetrics.clear();\n  }\n  \n  /**\n   * Cleanup observers\n   */\n  cleanup(): void {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n  }\n  \n  /**\n   * Sets up performance observer for resource timing\n   */\n  private setupResourceObserver(): void {\n    if (typeof PerformanceObserver !== 'undefined') {\n      const resourceObserver = new PerformanceObserver((list) => {\n        const entries = list.getEntries() as PerformanceResourceTiming[];\n        entries.forEach(entry => {\n          this.resourceMetrics.set(entry.name, entry);\n        });\n      });\n      \n      resourceObserver.observe({ entryTypes: ['resource'] });\n      this.observers.push(resourceObserver);\n    }\n  }\n  \n  /**\n   * Enriches metrics with additional performance data\n   */\n  private enrichMetricsFromPerformanceAPI(metric: AssetMetrics): void {\n    const resourceTiming = this.resourceMetrics.get(metric.url);\n    if (resourceTiming) {\n      metric.size = resourceTiming.transferSize;\n      metric.duration = resourceTiming.duration;\n      \n      // Add additional timing information\n      (metric as any).dnsLookupTime = resourceTiming.domainLookupEnd - resourceTiming.domainLookupStart;\n      (metric as any).connectTime = resourceTiming.connectEnd - resourceTiming.connectStart;\n      (metric as any).responseTime = resourceTiming.responseEnd - resourceTiming.responseStart;\n    }\n  }\n  \n  /**\n   * Generates unique tracking ID\n   */\n  private generateTrackingId(): string {\n    return `asset-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n  }\n}","/**\n * CDN Asset Loader for DataPrism\n * Handles loading DataPrism from CDN with fallback mechanisms and integrity verification\n */\n\nimport { CDNConfig, getCDNAssetUrls } from '@/config/cdn';\nimport { AssetLoadMonitor } from './assetMonitor';\n\n// Global DataPrism type declaration\ndeclare global {\n  interface Window {\n    DataPrism: any;\n  }\n}\n\nexport class CDNAssetLoader {\n  private config: CDNConfig;\n  private loadedAssets = new Set<string>();\n  private manifestCache: any = null;\n  private monitor: AssetLoadMonitor;\n\n  constructor(config: CDNConfig) {\n    this.config = config;\n    this.monitor = new AssetLoadMonitor();\n    // Reference to avoid unused variable warning\n    void this._getIntegrityHash;\n  }\n\n  /**\n   * Load DataPrism core bundle from CDN with hybrid architecture support\n   */\n  async loadCoreBundle(): Promise<typeof window.DataPrism> {\n    const urls = getCDNAssetUrls(this.config);\n    \n    try {\n      // First, fetch and validate the manifest\n      const manifest = await this.loadManifest();\n      \n      console.log('🔄 Loading DataPrism with hybrid architecture...');\n      console.log(`📦 Core bundle: ${urls.coreBundle} (~${Math.round(manifest.assets?.core?.size / 1024 || 29)}KB)`);\n      console.log('🔗 DuckDB workers: Auto-detecting CDN base URL for hybrid loading');\n      \n      // Load the core UMD bundle with hybrid loading support\n      await this.loadScript(urls.coreBundle);\n      \n      // Wait for global DataPrism to be available with extended timeout for hybrid loading\n      const hybridTimeout = this.config.fallback?.timeout || 20000; // Increased to 20s for hybrid architecture\n      const DataPrism = await this.waitForGlobal('DataPrism', hybridTimeout);\n      \n      console.log('✅ DataPrism loaded successfully from CDN with hybrid architecture');\n      console.log('🎯 Features: Fast CDN loading, reliable DuckDB access, universal compatibility');\n      return DataPrism;\n    } catch (error) {\n      if (this.config.fallback?.enabled) {\n        console.warn('⚠️ Hybrid CDN load failed, attempting fallback...');\n        return await this.loadFallback();\n      }\n      throw new Error(`Failed to load DataPrism from CDN: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Load and validate the CDN manifest\n   */\n  async loadManifest(): Promise<any> {\n    if (this.manifestCache) {\n      return this.manifestCache;\n    }\n\n    const urls = getCDNAssetUrls(this.config);\n    \n    try {\n      const response = await fetch(urls.manifest, {\n        cache: 'default',\n        credentials: 'omit'\n      });\n\n      if (!response.ok) {\n        throw new Error(`Manifest fetch failed: ${response.status} ${response.statusText}`);\n      }\n\n      const manifest = await response.json();\n      this.manifestCache = manifest;\n      \n      console.log('📋 CDN Manifest loaded:', {\n        version: manifest.version,\n        buildHash: manifest.buildHash,\n        assetCount: Object.keys(manifest.assets || {}).length,\n        architecture: 'hybrid',\n        totalSize: `${Math.round((manifest.build?.totalSize || 0) / 1024)}KB`,\n        compression: manifest.build?.compression || 'optimized'\n      });\n\n      return manifest;\n    } catch (error) {\n      throw new Error(`Failed to load CDN manifest: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Load a script with integrity verification and monitoring\n   */\n  private async loadScript(url: string, integrity?: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.loadedAssets.has(url)) {\n        resolve();\n        return;\n      }\n\n      // Start monitoring\n      const trackingId = this.monitor.startTracking(url);\n\n      const script = document.createElement('script');\n      script.src = url;\n      script.crossOrigin = 'anonymous';\n      \n      if (integrity) {\n        script.integrity = integrity;\n      }\n\n      script.onload = () => {\n        this.loadedAssets.add(url);\n        \n        // Record successful load\n        this.monitor.recordSuccess(trackingId);\n        \n        console.log(`✅ Script loaded: ${url}`);\n        resolve();\n      };\n      \n      script.onerror = () => {\n        const error = new Error(`Failed to load script: ${url}`);\n        \n        // Record error\n        this.monitor.recordError(trackingId, error);\n        \n        reject(error);\n      };\n\n      document.head.appendChild(script);\n    });\n  }\n\n  /**\n   * Wait for a global variable to become available\n   */\n  private async waitForGlobal(name: string, timeout: number): Promise<any> {\n    const start = Date.now();\n    \n    return new Promise((resolve, reject) => {\n      const check = () => {\n        if ((window as any)[name]) {\n          resolve((window as any)[name]);\n          return;\n        }\n        \n        if (Date.now() - start > timeout) {\n          reject(new Error(`Timeout waiting for global ${name} (${timeout}ms)`));\n          return;\n        }\n        \n        setTimeout(check, 100);\n      };\n      \n      check();\n    });\n  }\n\n  /**\n   * Get integrity hash for an asset from the manifest\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private _getIntegrityHash(assetName: string): string | undefined { // Future use for SRI validation\n    if (!this.manifestCache?.integrity) {\n      return undefined;\n    }\n\n    // Look for the asset in the integrity map\n    const manifest = this.manifestCache;\n    const assetInfo = manifest.assets[assetName];\n    \n    if (assetInfo && manifest.integrity[assetInfo.filename]) {\n      return manifest.integrity[assetInfo.filename];\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Fallback loading strategy\n   */\n  private async loadFallback(): Promise<typeof window.DataPrism> {\n    // For now, implement a simple retry mechanism\n    // In production, this could try alternative CDNs\n    \n    let lastError: Error | null = null;\n    const maxRetries = this.config.fallback?.retries || 3;\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        console.log(`🔄 Fallback attempt ${attempt}/${maxRetries}`);\n        \n        // Wait before retry\n        await new Promise(resolve => setTimeout(resolve, attempt * 1000));\n        \n        // Clear cache and try again\n        this.manifestCache = null;\n        this.loadedAssets.clear();\n        \n        return await this.loadCoreBundle();\n      } catch (error) {\n        lastError = error as Error;\n        console.warn(`❌ Fallback attempt ${attempt} failed:`, (error as Error).message);\n      }\n    }\n    \n    throw new Error(`All fallback attempts failed. Last error: ${lastError?.message || 'Unknown error'}`);\n  }\n\n  /**\n   * Preload assets for better performance\n   */\n  async preloadAssets(): Promise<void> {\n    try {\n      await this.loadManifest();\n      const urls = getCDNAssetUrls(this.config);\n      \n      // Preload the core bundle\n      const link = document.createElement('link');\n      link.rel = 'preload';\n      link.href = urls.coreBundle;\n      link.as = 'script';\n      link.crossOrigin = 'anonymous';\n      \n      document.head.appendChild(link);\n      \n      console.log('🚀 Assets preloaded for faster initialization');\n    } catch (error) {\n      console.warn('⚠️ Asset preloading failed:', error);\n      // Non-critical error, don't throw\n    }\n  }\n\n  /**\n   * Get CDN status information\n   */\n  async getCDNStatus(): Promise<{\n    available: boolean;\n    latency: number;\n    version: string;\n    error?: string;\n  }> {\n    const start = Date.now();\n    \n    try {\n      const manifest = await this.loadManifest();\n      const latency = Date.now() - start;\n      \n      return {\n        available: true,\n        latency,\n        version: manifest.version\n      };\n    } catch (error) {\n      return {\n        available: false,\n        latency: Date.now() - start,\n        version: 'unknown',\n        error: (error as Error).message\n      };\n    }\n  }\n\n  /**\n   * Get asset loading metrics\n   */\n  getAssetMetrics() {\n    return this.monitor.getMetrics();\n  }\n\n  /**\n   * Get performance summary\n   */\n  getPerformanceSummary() {\n    return this.monitor.getPerformanceSummary();\n  }\n\n  /**\n   * Get cache hit ratio\n   */\n  getCacheHitRatio() {\n    return this.monitor.getCacheHitRatio();\n  }\n\n  /**\n   * Validate performance thresholds\n   */\n  validatePerformanceThresholds() {\n    return this.monitor.validatePerformanceThresholds();\n  }\n\n  /**\n   * Clean up monitoring resources\n   */\n  cleanup() {\n    this.monitor.cleanup();\n  }\n}","/**\n * CDN-Based DataPrism Context\n * Loads DataPrism from CDN and provides React context for demo application\n */\n\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { CDNAssetLoader } from '@/utils/cdnLoader';\nimport { getCDNConfig } from '@/config/cdn';\n\ninterface DataPrismContextValue {\n  engine: any | null;\n  isInitialized: boolean;\n  isInitializing: boolean;\n  initializationError: Error | null;\n  cdnStatus: 'loading' | 'loaded' | 'error';\n  cdnInfo: {\n    version?: string;\n    latency?: number;\n    available?: boolean;\n  };\n  \n  // Core operations\n  query: (sql: string) => Promise<any>;\n  loadData: (data: any[], tableName?: string) => Promise<void>;\n  getTableInfo: (tableName: string) => Promise<any>;\n  listTables: () => Promise<string[]>;\n  \n  // Performance monitoring\n  getPerformanceMetrics: () => Promise<any>;\n  \n  // Utilities\n  retry: () => Promise<void>;\n  getCDNStatus: () => Promise<any>;\n}\n\nconst DataPrismContext = createContext<DataPrismContextValue | null>(null);\n\nexport const DataPrismProvider: React.FC<{ children: React.ReactNode }> = ({ \n  children \n}) => {\n  const [engine, setEngine] = useState<any>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(false);\n  const [initializationError, setInitializationError] = useState<Error | null>(null);\n  const [cdnStatus, setCdnStatus] = useState<'loading' | 'loaded' | 'error'>('loading');\n  const [cdnInfo, setCdnInfo] = useState<{\n    version?: string;\n    latency?: number;\n    available?: boolean;\n  }>({});\n\n  const initializeDataPrism = useCallback(async () => {\n    if (isInitializing || isInitialized) return;\n    \n    setIsInitializing(true);\n    setInitializationError(null);\n    setCdnStatus('loading');\n\n    try {\n      console.log('🚀 Initializing DataPrism from CDN...');\n      \n      const cdnConfig = getCDNConfig();\n      const loader = new CDNAssetLoader(cdnConfig);\n      \n      // Get CDN status for monitoring\n      const status = await loader.getCDNStatus();\n      setCdnInfo({\n        version: status.version,\n        latency: status.latency,\n        available: status.available\n      });\n\n      if (!status.available) {\n        throw new Error(`CDN not available: ${status.error}`);\n      }\n\n      // Preload assets for better performance\n      await loader.preloadAssets();\n      \n      // Try to load DataPrism from CDN with fallback to mock implementation\n      let engineInstance;\n      try {\n        // Load DataPrism from CDN\n        const DataPrism = await loader.loadCoreBundle();\n        setCdnStatus('loaded');\n        \n        // Initialize engine with the same configuration as reference\n        engineInstance = new DataPrism.DataPrismEngine({\n          maxMemoryMB: 512,\n          enableWasmOptimizations: true,\n          logLevel: import.meta.env.DEV ? 'debug' : 'info',\n        });\n        \n        await engineInstance.initialize();\n        \n        // Wait for DuckDB to be fully ready before proceeding\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Verify DuckDB connection is established\n        try {\n          await engineInstance.query('SELECT 1 as test');\n          console.log(`✅ DataPrism initialized from CDN with hybrid architecture (v${status.version}, ${status.latency}ms)`);\n          console.log('🎯 Active features: Fast CDN loading, reliable DuckDB access, universal compatibility');\n        } catch (connectionError) {\n          const errorMessage = connectionError instanceof Error ? connectionError.message : String(connectionError);\n          \n          // Check for specific Arrow/RecordBatchReader issues\n          if (errorMessage.includes('RecordBatchReader') || errorMessage.includes('Arrow')) {\n            console.warn('⚠️ Apache Arrow dependency issue detected, retrying with alternative approach...', connectionError);\n            // Try to wait longer for workers to fully initialize\n            await new Promise(resolve => setTimeout(resolve, 3000));\n            \n            try {\n              await engineInstance.query('SELECT 1 as test');\n              console.log(`✅ DataPrism initialized from CDN with hybrid architecture (v${status.version}, ${status.latency}ms) - Arrow loaded`);\n              console.log('🎯 Active features: Fast CDN loading, reliable DuckDB access, universal compatibility');\n            } catch (secondError) {\n              console.warn('⚠️ DuckDB connection still not ready after Arrow wait, falling back...', secondError);\n              throw new Error(`DuckDB connection failed: ${errorMessage}`);\n            }\n          } else {\n            console.warn('⚠️ DuckDB connection not ready, retrying initialization...', connectionError);\n            throw new Error(`DuckDB connection failed: ${errorMessage}`);\n          }\n        }\n      } catch (cdnError) {\n        const errorMessage = cdnError instanceof Error ? cdnError.message : String(cdnError);\n        \n        // Provide specific guidance for CDN issues (should be rare with hybrid architecture)\n        if (errorMessage.includes('selectBundle') || errorMessage.includes('DuckDB')) {\n          console.warn('⚠️ CDN DataPrism DuckDB initialization failed, using mock implementation...', {\n            error: errorMessage,\n            note: 'This may indicate a network issue with the hybrid loading mechanism'\n          });\n        } else if (errorMessage.includes('timeout') || errorMessage.includes('network')) {\n          console.warn('⚠️ CDN DataPrism network timeout, using mock implementation...', {\n            error: errorMessage,\n            note: 'Hybrid architecture requires stable network for worker loading'\n          });\n        } else if (errorMessage.includes('connection') || errorMessage.includes('from')) {\n          console.warn('⚠️ CDN DataPrism connection not ready, using mock implementation...', {\n            error: errorMessage,\n            note: 'DuckDB connection may need more time to initialize in hybrid mode'\n          });\n        } else if (errorMessage.includes('RecordBatchReader') || errorMessage.includes('Arrow')) {\n          console.warn('⚠️ CDN DataPrism Apache Arrow dependency issue, using mock implementation...', {\n            error: errorMessage,\n            note: 'Apache Arrow libraries may need more time to load in hybrid mode'\n          });\n        } else {\n          console.warn('⚠️ CDN DataPrism initialization failed, using mock implementation...', cdnError);\n        }\n        setCdnStatus('error');\n        \n        // Use mock implementation as fallback\n        const { MockDataPrismEngine } = await import('./MockDataPrismContext');\n        engineInstance = new MockDataPrismEngine({\n          maxMemoryMB: 512,\n          enableWasmOptimizations: true,\n          logLevel: import.meta.env.DEV ? 'debug' : 'info',\n        });\n        \n        await engineInstance.initialize();\n        console.log('✅ DataPrism initialized with mock implementation (CDN fallback active)');\n      }\n      \n      setEngine(engineInstance);\n      setIsInitialized(true);\n\n      // Load sample datasets for demo\n      await loadSampleData(engineInstance);\n    } catch (error) {\n      console.error('❌ Failed to initialize DataPrism from CDN:', error);\n      setInitializationError(error as Error);\n      setCdnStatus('error');\n    } finally {\n      setIsInitializing(false);\n    }\n  }, [isInitializing, isInitialized]);\n\n  const loadSampleData = async (engineInstance: any) => {\n    try {\n      console.log('📊 Loading sample datasets...');\n      \n      // Verify engine is ready for data loading\n      const testResult = await engineInstance.query('SELECT 1 as ready');\n      if (!testResult || !testResult.data) {\n        throw new Error('Engine not ready for data loading');\n      }\n      \n      // Sample sales data\n      const salesData = generateSalesData(1000);\n      await engineInstance.loadData(salesData, 'sales');\n      console.log('📊 Loaded sample sales data (1000 records)');\n\n      // Sample user analytics data\n      const analyticsData = generateAnalyticsData(5000);\n      await engineInstance.loadData(analyticsData, 'analytics');\n      console.log('📈 Loaded sample analytics data (5000 records)');\n\n      // Sample product data\n      const productData = generateProductData(200);\n      await engineInstance.loadData(productData, 'products');\n      console.log('🛍️ Loaded sample product data (200 records)');\n      \n      // Verify data was loaded successfully\n      const tableList = await engineInstance.listTables();\n      console.log('✅ Sample data loading completed. Available tables:', tableList);\n    } catch (error) {\n      console.warn('⚠️ Failed to load sample data:', error);\n      // Don't throw - this is not critical for demo functionality\n    }\n  };\n\n  useEffect(() => {\n    initializeDataPrism();\n  }, [initializeDataPrism]);\n\n  // Context methods\n  const query = useCallback(\n    async (sql: string) => {\n      if (!engine) {\n        throw new Error('DataPrism engine not initialized');\n      }\n      return await engine.query(sql);\n    },\n    [engine],\n  );\n\n  const loadData = useCallback(\n    async (data: any[], tableName = 'user_data') => {\n      if (!engine) {\n        throw new Error('DataPrism engine not initialized');\n      }\n      return await engine.loadData(data, tableName);\n    },\n    [engine],\n  );\n\n  const getTableInfo = useCallback(\n    async (tableName: string) => {\n      if (!engine) {\n        throw new Error('DataPrism engine not initialized');\n      }\n      return await engine.getTableInfo(tableName);\n    },\n    [engine],\n  );\n\n  const listTables = useCallback(async () => {\n    if (!engine) {\n      throw new Error('DataPrism engine not initialized');\n    }\n    return await engine.listTables();\n  }, [engine]);\n\n  const getPerformanceMetrics = useCallback(async () => {\n    if (!engine) {\n      throw new Error('DataPrism engine not initialized');\n    }\n    return engine.getMetrics();\n  }, [engine]);\n\n  const retry = useCallback(async () => {\n    setIsInitialized(false);\n    setEngine(null);\n    setInitializationError(null);\n    await initializeDataPrism();\n  }, [initializeDataPrism]);\n\n  const getCDNStatus = useCallback(async () => {\n    const cdnConfig = getCDNConfig();\n    const loader = new CDNAssetLoader(cdnConfig);\n    return await loader.getCDNStatus();\n  }, []);\n\n  const value: DataPrismContextValue = {\n    engine,\n    isInitialized,\n    isInitializing,\n    initializationError,\n    cdnStatus,\n    cdnInfo,\n    query,\n    loadData,\n    getTableInfo,\n    listTables,\n    getPerformanceMetrics,\n    retry,\n    getCDNStatus\n  };\n\n  return (\n    <DataPrismContext.Provider value={value}>\n      {children}\n    </DataPrismContext.Provider>\n  );\n};\n\nexport const useDataPrism = () => {\n  const context = useContext(DataPrismContext);\n  if (!context) {\n    throw new Error('useDataPrism must be used within a DataPrismProvider');\n  }\n  return context;\n};\n\n// Sample data generators (same as original but kept for standalone operation)\nfunction generateSalesData(count: number) {\n  const regions = ['North', 'South', 'East', 'West'];\n  const products = ['Widget A', 'Widget B', 'Gadget X', 'Gadget Y', 'Tool Z'];\n  const salespeople = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve'];\n\n  return Array.from({ length: count }, (_, i) => ({\n    id: i + 1,\n    date: new Date(\n      2023,\n      Math.floor(Math.random() * 12),\n      Math.floor(Math.random() * 28) + 1,\n    )\n      .toISOString()\n      .split('T')[0],\n    region: regions[Math.floor(Math.random() * regions.length)],\n    product: products[Math.floor(Math.random() * products.length)],\n    salesperson: salespeople[Math.floor(Math.random() * salespeople.length)],\n    quantity: Math.floor(Math.random() * 100) + 1,\n    unit_price: Math.round((Math.random() * 1000 + 50) * 100) / 100,\n    total: 0, // Will be calculated\n  })).map((row) => ({\n    ...row,\n    total: Math.round(row.quantity * row.unit_price * 100) / 100,\n  }));\n}\n\nfunction generateAnalyticsData(count: number) {\n  const sources = [\n    'google',\n    'facebook',\n    'twitter',\n    'linkedin',\n    'direct',\n    'email',\n  ];\n  const pages = ['/', '/products', '/about', '/contact', '/blog', '/pricing'];\n  const devices = ['desktop', 'mobile', 'tablet'];\n\n  return Array.from({ length: count }, (_, i) => ({\n    id: i + 1,\n    timestamp: new Date(\n      Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000,\n    ).toISOString(),\n    user_id: `user_${Math.floor(Math.random() * 1000) + 1}`,\n    session_id: `session_${Math.floor(Math.random() * 2000) + 1}`,\n    source: sources[Math.floor(Math.random() * sources.length)],\n    page: pages[Math.floor(Math.random() * pages.length)],\n    device: devices[Math.floor(Math.random() * devices.length)],\n    duration: Math.floor(Math.random() * 600) + 10, // 10 seconds to 10 minutes\n    bounce: Math.random() < 0.4,\n    conversion: Math.random() < 0.1,\n  }));\n}\n\nfunction generateProductData(count: number) {\n  const categories = [\n    'Electronics',\n    'Clothing',\n    'Books',\n    'Home & Garden',\n    'Sports',\n    'Toys',\n  ];\n  const brands = ['BrandA', 'BrandB', 'BrandC', 'BrandD', 'BrandE'];\n\n  return Array.from({ length: count }, (_, i) => ({\n    id: i + 1,\n    name: `Product ${i + 1}`,\n    category: categories[Math.floor(Math.random() * categories.length)],\n    brand: brands[Math.floor(Math.random() * brands.length)],\n    price: Math.round((Math.random() * 500 + 10) * 100) / 100,\n    rating: Math.round((Math.random() * 2 + 3) * 10) / 10, // 3.0 to 5.0\n    reviews_count: Math.floor(Math.random() * 1000),\n    in_stock: Math.random() < 0.9,\n    created_at: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .split('T')[0],\n  }));\n}","/**\n * CDN Status Component\n * Displays real-time CDN status and DataPrism loading information\n */\n\nimport React from 'react';\nimport { useDataPrism } from '@/contexts/DataPrismContext';\n\nexport const CDNStatus: React.FC = () => {\n  const { \n    cdnStatus, \n    isInitialized, \n    isInitializing,\n    initializationError, \n    cdnInfo,\n    retry \n  } = useDataPrism();\n\n  const getStatusColor = () => {\n    switch (cdnStatus) {\n      case 'loading': return 'text-blue-600 bg-blue-50 border-blue-200';\n      case 'loaded': return 'text-green-600 bg-green-50 border-green-200';\n      case 'error': return 'text-red-600 bg-red-50 border-red-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = () => {\n    if (isInitializing) return '🔄';\n    switch (cdnStatus) {\n      case 'loading': return '⏳';\n      case 'loaded': return '✅';\n      case 'error': return '❌';\n      default: return '⏳';\n    }\n  };\n\n  const getStatusText = () => {\n    if (isInitializing) return 'Initializing...';\n    if (isInitialized && cdnStatus === 'error') return 'Ready (Mock Mode)';\n    if (isInitialized) return 'Ready';\n    if (initializationError) return 'Failed';\n    return 'Loading...';\n  };\n\n  return (\n    <div className={`flex items-center space-x-3 p-4 border rounded-lg ${getStatusColor()}`}>\n      <span className=\"text-2xl animate-pulse\">{getStatusIcon()}</span>\n      \n      <div className=\"flex-1\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"font-semibold\">\n            CDN Status: {getStatusText()}\n          </span>\n          {cdnInfo.version && (\n            <span className=\"text-sm opacity-75\">\n              v{cdnInfo.version}\n            </span>\n          )}\n        </div>\n        \n        <div className=\"flex flex-wrap gap-4 mt-1 text-sm opacity-75\">\n          {cdnInfo.latency && (\n            <span>Latency: {cdnInfo.latency}ms</span>\n          )}\n          {cdnInfo.available !== undefined && (\n            <span>Available: {cdnInfo.available ? 'Yes' : 'No'}</span>\n          )}\n          {isInitialized && (\n            <span className=\"text-green-600 font-medium\">\n              {cdnStatus === 'error' ? 'Mock Implementation Active' : 'DataPrism Ready (Hybrid Architecture)'}\n            </span>\n          )}\n        </div>\n        \n        {cdnStatus === 'error' && isInitialized && (\n          <div className=\"mt-2 text-sm\">\n            <div className=\"flex items-center space-x-2 text-yellow-600\">\n              <span>ℹ️</span>\n              <span>Using mock implementation - CDN hybrid architecture unavailable (dependency loading issue)</span>\n            </div>\n          </div>\n        )}\n        \n        {initializationError && !isInitialized && (\n          <div className=\"mt-2\">\n            <details className=\"text-sm\">\n              <summary className=\"cursor-pointer font-medium\">\n                Error: {initializationError.message}\n              </summary>\n              <pre className=\"mt-1 text-xs opacity-75 overflow-x-auto\">\n                {initializationError.stack}\n              </pre>\n            </details>\n          </div>\n        )}\n      </div>\n      \n      {initializationError && (\n        <button\n          onClick={retry}\n          className=\"px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors\"\n        >\n          Retry\n        </button>\n      )}\n    </div>\n  );\n};","/**\n * Home Page for Standalone DataPrism Demo Analytics\n * Demonstrates CDN-based DataPrism integration\n */\n\nimport React from 'react';\nimport { useDataPrism } from '@/contexts/DataPrismContext';\nimport { CDNStatus } from '@/components/CDNStatus';\nimport { getCDNConfig } from '@/config/cdn';\n\nexport const HomePage: React.FC = () => {\n  const { isInitialized, cdnInfo } = useDataPrism();\n  const cdnConfig = getCDNConfig();\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <header className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n          DataPrism Demo Analytics\n        </h1>\n        <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n          Standalone demo application showcasing DataPrism's powerful analytics capabilities.\n          This application loads DataPrism directly from CDN, demonstrating best practices \n          for external integration.\n        </p>\n      </header>\n      \n      <div className=\"mb-8\">\n        <CDNStatus />\n      </div>\n\n      {isInitialized ? (\n        <div className=\"space-y-8\">\n          {/* Feature Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <FeatureCard\n              title=\"Data Explorer\"\n              description=\"Import and explore datasets with DataPrism's powerful analytics engine.\"\n              icon=\"📊\"\n              href=\"/data-explorer\"\n              color=\"blue\"\n            />\n            \n            <FeatureCard\n              title=\"Query Lab\"\n              description=\"Write and execute SQL queries against your data with real-time results.\"\n              icon=\"🔍\"\n              href=\"/query-lab\"\n              color=\"green\"\n            />\n            \n            <FeatureCard\n              title=\"Visualization Studio\"\n              description=\"Create interactive charts and visualizations from your data.\"\n              icon=\"📈\"\n              href=\"/visualization\"\n              color=\"purple\"\n            />\n            \n            <FeatureCard\n              title=\"Performance Dashboard\"\n              description=\"Monitor query performance and system metrics in real-time.\"\n              icon=\"⚡\"\n              href=\"/performance\"\n              color=\"orange\"\n            />\n            \n            <FeatureCard\n              title=\"Plugin Showcase\"\n              description=\"Explore DataPrism's extensible plugin system and custom integrations.\"\n              icon=\"🔌\"\n              href=\"/plugins\"\n              color=\"indigo\"\n            />\n            \n            <FeatureCard\n              title=\"About & Documentation\"\n              description=\"Learn more about DataPrism and this standalone demo application.\"\n              icon=\"📚\"\n              href=\"/about\"\n              color=\"gray\"\n            />\n          </div>\n\n          {/* CDN Integration Info */}\n          <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border\">\n            <h3 className=\"text-xl font-semibold mb-4 text-gray-900\">\n              📡 CDN Integration Details\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <InfoItem\n                label=\"CDN Source\"\n                value=\"GitHub Pages\"\n                detail={cdnConfig.baseUrl}\n              />\n              <InfoItem\n                label=\"Bundle Format\"\n                value=\"UMD + ES Modules\"\n                detail=\"Universal compatibility\"\n              />\n              <InfoItem\n                label=\"Asset Integrity\"\n                value=\"SHA-384 Verified\"\n                detail=\"Cryptographic validation\"\n              />\n              <InfoItem\n                label=\"Version\"\n                value={cdnInfo.version || 'Loading...'}\n                detail=\"Automatically managed\"\n              />\n              <InfoItem\n                label=\"Load Time\"\n                value={cdnInfo.latency ? `${cdnInfo.latency}ms` : 'N/A'}\n                detail=\"Initial CDN response\"\n              />\n              <InfoItem\n                label=\"Availability\"\n                value={cdnInfo.available ? 'Online' : 'Unknown'}\n                detail=\"Real-time status\"\n              />\n            </div>\n          </div>\n\n          {/* Sample Data Info */}\n          <div className=\"bg-gray-50 p-6 rounded-lg\">\n            <h3 className=\"text-xl font-semibold mb-4 text-gray-900\">\n              🗃️ Available Sample Datasets\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <DatasetCard\n                name=\"Sales Data\"\n                records=\"1,000\"\n                description=\"Regional sales transactions with products and salespeople\"\n                table=\"sales\"\n              />\n              <DatasetCard\n                name=\"Analytics Data\"\n                records=\"5,000\"\n                description=\"User behavior and traffic analytics with conversion tracking\"\n                table=\"analytics\"\n              />\n              <DatasetCard\n                name=\"Product Catalog\"\n                records=\"200\"\n                description=\"E-commerce product information with ratings and inventory\"\n                table=\"products\"\n              />\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 mb-2\">Loading DataPrism from CDN...</p>\n          <p className=\"text-sm text-gray-500\">\n            This may take a few seconds for initial WASM compilation\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Helper Components\n\ninterface FeatureCardProps {\n  title: string;\n  description: string;\n  icon: string;\n  href: string;\n  color: string;\n}\n\nconst FeatureCard: React.FC<FeatureCardProps> = ({ title, description, icon, href, color }) => {\n  const colorClasses = {\n    blue: 'hover:bg-blue-50 border-blue-200 hover:border-blue-300',\n    green: 'hover:bg-green-50 border-green-200 hover:border-green-300',\n    purple: 'hover:bg-purple-50 border-purple-200 hover:border-purple-300',\n    orange: 'hover:bg-orange-50 border-orange-200 hover:border-orange-300',\n    indigo: 'hover:bg-indigo-50 border-indigo-200 hover:border-indigo-300',\n    gray: 'hover:bg-gray-50 border-gray-200 hover:border-gray-300',\n  };\n\n  return (\n    <a\n      href={href}\n      className={`block p-6 bg-white rounded-lg border-2 transition-all duration-200 ${colorClasses[color as keyof typeof colorClasses]}`}\n    >\n      <div className=\"text-3xl mb-3\">{icon}</div>\n      <h3 className=\"text-xl font-semibold mb-2 text-gray-900\">{title}</h3>\n      <p className=\"text-gray-600 text-sm leading-relaxed\">{description}</p>\n    </a>\n  );\n};\n\ninterface InfoItemProps {\n  label: string;\n  value: string;\n  detail?: string;\n}\n\nconst InfoItem: React.FC<InfoItemProps> = ({ label, value, detail }) => (\n  <div>\n    <dt className=\"font-medium text-gray-700\">{label}</dt>\n    <dd className=\"text-gray-900\">{value}</dd>\n    {detail && <dd className=\"text-xs text-gray-500 mt-1\">{detail}</dd>}\n  </div>\n);\n\ninterface DatasetCardProps {\n  name: string;\n  records: string;\n  description: string;\n  table: string;\n}\n\nconst DatasetCard: React.FC<DatasetCardProps> = ({ name, records, description, table }) => (\n  <div className=\"bg-white p-4 rounded border\">\n    <div className=\"flex justify-between items-start mb-2\">\n      <h4 className=\"font-semibold text-gray-900\">{name}</h4>\n      <span className=\"text-sm bg-blue-100 text-blue-700 px-2 py-1 rounded\">\n        {records} rows\n      </span>\n    </div>\n    <p className=\"text-sm text-gray-600 mb-2\">{description}</p>\n    <p className=\"text-xs text-gray-500\">Table: <code className=\"bg-gray-100 px-1 rounded\">{table}</code></p>\n  </div>\n);","/**\n * Error Boundary for DataPrism Demo Analytics\n */\n\nimport { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('DataPrism Demo Error:', error, errorInfo);\n    this.setState({ error, errorInfo });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-red-50 flex items-center justify-center p-4\">\n          <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-6\">\n            <div className=\"text-center mb-4\">\n              <h1 className=\"text-2xl font-bold text-red-600 mb-2\">\n                🚨 Application Error\n              </h1>\n              <p className=\"text-gray-600\">\n                Something went wrong in the DataPrism demo application.\n              </p>\n            </div>\n\n            {this.state.error && (\n              <div className=\"mb-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Error:</h3>\n                <p className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n                  {this.state.error.message}\n                </p>\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <button\n                onClick={() => window.location.reload()}\n                className=\"w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n              >\n                Reload Application\n              </button>\n              \n              <details className=\"text-sm\">\n                <summary className=\"cursor-pointer text-gray-600 hover:text-gray-800\">\n                  Show Technical Details\n                </summary>\n                <pre className=\"mt-2 text-xs bg-gray-100 p-2 rounded overflow-auto max-h-32\">\n                  {this.state.error?.stack}\n                </pre>\n              </details>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","/**\n * Simplified DataPrism Demo Analytics App\n * Core implementation for PRP validation\n */\n\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { DataPrismProvider } from '@/contexts/DataPrismContext';\nimport { HomePage } from '@/pages/HomePage';\nimport { ErrorBoundary } from '@/components/ErrorBoundary';\nimport './App.css';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <DataPrismProvider>\n        <Router>\n          <div className=\"min-h-screen bg-gray-50\">\n            <Routes>\n              <Route path=\"/\" element={<HomePage />} />\n            </Routes>\n          </div>\n        </Router>\n      </DataPrismProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;","/**\n * Entry point for DataPrism Demo Analytics\n * Standalone application that consumes DataPrism via CDN\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\n\n// Initialize application\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);"],"file":"assets/index-C2lOBV1c.js"}