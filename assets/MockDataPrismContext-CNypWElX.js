var i=Object.defineProperty;var r=(n,e,t)=>e in n?i(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var s=(n,e,t)=>r(n,typeof e!="symbol"?e+"":e,t);class c{constructor(e={}){s(this,"tables",new Map)}async initialize(){console.log("🔧 Mock DataPrism Engine initialized"),await new Promise(e=>setTimeout(e,500))}async query(e){if(console.log("📝 Mock query:",e),e.includes("SHOW TABLES"))return{data:Array.from(this.tables.keys()).map(t=>({name:t})),rowCount:this.tables.size,executionTime:Math.random()*100};if(e.includes("DESCRIBE")){const t=e.split(" ")[1];if(this.tables.has(t)){const a=this.tables.get(t)?.[0]||{};return{data:Object.keys(a).map(o=>({column_name:o,data_type:typeof a[o]=="number"?"INTEGER":"VARCHAR",is_nullable:"YES"})),rowCount:Object.keys(a).length,executionTime:Math.random()*50}}}if(e.includes("SELECT")||e.includes("FROM")){const t=Array.from(this.tables.entries());if(t.length>0){const[a,o]=t[0];return{data:o.slice(0,10),rowCount:o.length,executionTime:Math.random()*200}}}return{data:[],rowCount:0,executionTime:Math.random()*100}}async loadData(e,t){console.log(`📊 Mock loading ${e.length} records into table: ${t}`),this.tables.set(t,e),await new Promise(a=>setTimeout(a,200))}async getTableInfo(e){if(!this.tables.has(e))throw new Error(`Table ${e} not found`);const t=this.tables.get(e)?.[0]||{};return Object.keys(t).map(a=>({column_name:a,data_type:typeof t[a]=="number"?"INTEGER":"VARCHAR",is_nullable:"YES"}))}async listTables(){return Array.from(this.tables.keys())}getMetrics(){return{queriesExecuted:Math.floor(Math.random()*100),averageQueryTime:Math.floor(Math.random()*200),cacheHitRate:Math.random(),memoryUsage:Math.floor(Math.random()*100),tablesLoaded:this.tables.size}}}export{c as MockDataPrismEngine};
//# sourceMappingURL=MockDataPrismContext-CNypWElX.js.map
